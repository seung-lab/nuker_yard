[Volumes]
# Voxelwise descriptor volume to segment
descriptor = s3://minnie65-phase2-nuclei/net-output

# Output segmentation
output = s3://minnie65-phase2-nuclei/seg

# Temporary output for intermediate results
tempoutput = s3://minnie65-phase2-nuclei/seg_temp


# "Base" segmentation for overlaps and assignment.
#  Likely the morphological segmentation
baseseg = [BASE SEG PATH]

# EM image volume
image = [IMAGE PATH]


[Dimensions]
# Voxel resolution (X, Y, Z)
voxelres = 64, 64, 40

# Lower bound of the bounding box
startcoord = 4000, 5000, 14825

# Size of the bounding box in each dimension
volshape = 22528, 16384, 13056
# chunk aligned, otherwise would/may cause non-alignment error from cloudvolume

# Size of a single chunk in each dimension
chunkshape = 1024, 1024, 768
# chunk aligned, otherwise would/may cause non-alignment error from cloudvolume

# Size of a storage block in cloud storage for 
# the output & tempoutput volumes
blockshape = 256, 256, 32

# Patch size for assignment inference (ignored if not run)
patchshape = 80, 80, 18


[Parameters]
# Connected Components Threshold
ccthresh = 0.5

# Object Size Threshold
szthresh = 1000
 #100

# Dust Threshold
dustthresh = 0

# How much to split up some tasks for merging results across chunks.
# This should be set to 1 for almost all workloads
nummergetasks = 1

# Merging distance for segments assigned to the same partners
# (units should match `voxelres` above)
mergethresh = 0


[Workflow]
# The type of workflow to be run. Determines when some tasks need to happen
# {Segmentation, Segmentation+Assignment}
workflowtype = Segmentation

# The kind of storage backend to use. Database is currently required for
# parallel merging operations
# {Database, File}
workspacetype = File

# URL for accessing the task message queue
queueurl = https://sqs.us-east-1.amazonaws.com/098703261575/shang-generic

# SQL Alchemy connection string, location of a file containing this string,
# or STORAGE_FROM_FILE if using a kubernetes secret.
# This is ignored if workspacetype = File
connectionstr = STORAGE_FROM_FILE

# A directory for storing intermediate data outside of the database.
# This is required for either workspacetype
storagedir = s3://minnie65-phase2-nuclei/seg_aux
